"use client";

import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { 
  Wifi, 
  WifiOff,
  RefreshCw,
  Eye,
  Trash2,
  Edit,
  Copy,
  Loader2
} from 'lucide-react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';

// Types
type NetworkStatus = 'active' | 'inactive' | 'maintenance';

type Network = {
  id: number;
  name: string;
  status: NetworkStatus;
  type: string;
  password: string;
  bandwidth: string;
  connectedDevices: number;
  usagePercent: number;
};

const WiFiSettingsPage = () => {
  const [isMounted, setIsMounted] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [wifiNetworks, setWifiNetworks] = useState<Network[]>([]);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<string>('');

  // Initialize component
  useEffect(() => {
    setIsMounted(true);
    loadInitialData();
    return () => setIsMounted(false);
  }, []);

  // Load initial data
  const loadInitialData = async () => {
    try {
      setIsLoading(true);
      await loadNetworks();
      setLastUpdated(new Date().toLocaleTimeString());
    } catch (err) {
      console.error('Error loading initial data:', err);
      toast.error('Failed to load WiFi settings');
    } finally {
      setIsLoading(false);
    }
  };

  // Load networks
  const loadNetworks = async () => {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const mockNetworks: Network[] = [
      {
        id: 1,
        name: "OmniSpace-Guest",
        status: "active",
        type: "guest",
        password: "welcome2025",
        bandwidth: "50 Mbps",
        connectedDevices: 12,
        usagePercent: 65,
      },
      {
        id: 2,
        name: "OmniSpace-Premium",
        status: "active",
        type: "premium",
        password: "premium2025",
        bandwidth: "200 Mbps",
        connectedDevices: 5,
        usagePercent: 30,
      },
      {
        id: 3,
        name: "OmniSpace-Events",
        status: "active",
        type: "events",
        password: "events2025",
        bandwidth: "100 Mbps",
        connectedDevices: 8,
        usagePercent: 45,
      },
    ];
    
    setWifiNetworks(mockNetworks);
  };

  // Handle refresh networks
  const handleRefreshNetworks = async () => {
    try {
      setIsRefreshing(true);
      await loadNetworks();
      setLastUpdated(new Date().toLocaleTimeString());
      toast.success('WiFi networks refreshed successfully');
    } catch (err) {
      console.error('Error refreshing networks:', err);
      toast.error('Failed to refresh networks');
    } finally {
      setIsRefreshing(false);
    }
  };

  // Handle toggle network status
  const handleToggleStatus = (networkId: number) => {
    setWifiNetworks(prev => {
      const updated = prev.map(network => 
        network.id === networkId 
          ? { ...network, status: network.status === 'active' ? 'inactive' : 'active' } 
          : network
      );
      
      const networkName = updated.find(n => n.id === networkId)?.name || 'Network';
      toast.success(`${networkName} status updated`);
      
      return updated;
    });
  };

  // Don't render anything during SSR or while loading initial data
  if (!isMounted || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">WiFi Settings</h1>
          <p className="text-muted-foreground">
            Manage your WiFi networks and connected devices
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleRefreshNetworks}
            disabled={isRefreshing}
          >
            <RefreshCw className={`mr-2 h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <span className="text-sm text-muted-foreground">
            Last updated: {lastUpdated}
          </span>
        </div>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {wifiNetworks.map((network) => (
          <Card key={network.id}>
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">{network.name}</CardTitle>
                <Badge 
                  variant={network.status === 'active' ? 'default' : 'secondary'}
                  className="capitalize"
                >
                  {network.status}
                </Badge>
              </div>
              <CardDescription className="capitalize">
                {network.type} Network
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Status</span>
                <Switch
                  checked={network.status === 'active'}
                  onCheckedChange={() => handleToggleStatus(network.id)}
                />
              </div>
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Password</span>
                  <div className="flex items-center space-x-2">
                    <code className="relative rounded bg-muted px-2 py-1 font-mono text-sm font-semibold">
                      {network.password}
                    </code>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      className="h-8 w-8"
                      onClick={() => {
                        navigator.clipboard.writeText(network.password);
                        toast.success('Password copied to clipboard');
                      }}
                    >
                      <Copy className="h-4 w-4" />
                      <span className="sr-only">Copy password</span>
                    </Button>
                  </div>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Bandwidth</span>
                  <span className="text-sm">{network.bandwidth}</span>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">Connected Devices</span>
                  <span className="text-sm">{network.connectedDevices}</span>
                </div>
                
                <div className="pt-2">
                  <div className="flex items-center justify-between text-sm mb-1">
                    <span>Usage</span>
                    <span>{network.usagePercent}%</span>
                  </div>
                  <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-primary" 
                      style={{ width: `${network.usagePercent}%` }}
                    />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default WiFiSettingsPage;
