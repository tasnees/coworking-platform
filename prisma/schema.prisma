// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String    @default("member")
  status            String    @default("active") // active, suspended, cancelled, pending
  membershipType    String?   @default("flex")   // flex, dedicated, team, enterprise
  phone             String?
  notes             String?   @db.String
  lastLogin         DateTime?
  membershipEndDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  sessions          Session[]
  scheduledCheckIns ScheduledCheckIn[]
  bookings          Booking[]
  
  @@index([createdAt])
  @@index([status])
  @@index([membershipType])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MembershipPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String   // daily, weekly, monthly, etc.
  price       Float
  features   String[] // Array of features
  active      Boolean  @default(true)
  members     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduledCheckIn {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  checkInTime DateTime
  status      String   // "scheduled", "completed", "cancelled", "missed"
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([checkInTime])
  @@index([status])
}

model Resource {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String    // e.g., "Desk", "Meeting Room", "Private Office"
  capacity    Int
  hourlyRate  Float
  status      String    @default("available") // "available", "maintenance", "unavailable"
  location    String?
  description String?
  imageUrl    String?
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([status])
}

model Booking {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  resourceId   String   @db.ObjectId
  resource     Resource @relation(fields: [resourceId], references: [id])
  resourceName String
  resourceType String
  startTime    DateTime
  endTime      DateTime
  status       String   @default("confirmed") // "confirmed", "cancelled", "completed"
  notes        String?
  price        Float
  paid         Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([startTime])
  @@index([status])
}
